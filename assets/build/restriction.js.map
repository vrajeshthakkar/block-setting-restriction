{"version":3,"file":"restriction.js","mappings":"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","sources":["webpack://block-setting-restriction-plugin/external window [\"wp\",\"blockEditor\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"components\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"compose\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"data\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"domReady\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"element\"]","webpack://block-setting-restriction-plugin/external window [\"wp\",\"hooks\"]","webpack://block-setting-restriction-plugin/webpack/bootstrap","webpack://block-setting-restriction-plugin/webpack/runtime/compat get default export","webpack://block-setting-restriction-plugin/webpack/runtime/define property getters","webpack://block-setting-restriction-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://block-setting-restriction-plugin/webpack/runtime/make namespace object","webpack://block-setting-restriction-plugin/./src/js/block-setting-restriction.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"compose\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"domReady\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// /**\n//  * Adds a filter to modify or extend the behavior of WordPress blocks or other functionalities.\n//  *\n//  * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/\n//  */\n// import { addFilter } from '@wordpress/hooks';\n\n// const bsrOptionsData = bsrConfig.bsrData;\n// const currentUserId = bsrConfig.userId;\n\n// addFilter(\n//     'blockEditor.useSetting.before',\n//     'conditional-block/useSetting.before',\n//     (settingValue, settingName, clientId, blockName) => {\n\n//         if (bsrOptionsData.hasOwnProperty(blockName)) {\n//             const matchingArray = bsrOptionsData[blockName];\n\n//             if (matchingArray.includes(currentUserId)) {\n//                 // console.log(\"Current user ID exists in matching array.\");\n\n//                 // Get all block settings\n//                 const blockSettings = wp.blocks.getBlockType(blockName);\n\n//                 if ( blockSettings ) {\n//                     // Combine supports and any other relevant settings\n//                     const allSettings = {\n//                         ...blockSettings.supports,\n//                         ...blockSettings.attributes,\n//                         // ...blockSettings.deprecated,\n//                     };\n\n//                     // console.log(`All Settings for ${blockName}: `, allSettings);\n//                     const settingNames = Object.keys(allSettings);\n//                     console.log(\"Setting name: \", settingName);\n//                     console.log(\"Available Setting Names: \", settingNames);\n\n//                     // if (settingNames.includes(settingName)) {\n//                     //     return false;\n//                     // } else {\n//                     //     console.log(\"Setting not found in above object\" );\n//                     // }\n\n//                     return false;\n//                 }\n//             } else {\n//                 console.log(\"Not Exists\");\n//             }\n//         }\n\n//         return settingValue;\n//     }\n// );\n\n\n// ------------------------------------------ SOLUTION 2 ------------------------------------------\nimport domReady from '@wordpress/dom-ready';\nimport { addFilter } from '@wordpress/hooks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Disabled } from '@wordpress/components';\nimport { store as blockEditorStore, InspectorControls } from '@wordpress/block-editor';\nimport { select } from '@wordpress/data';\n\n// domReady(() => {\n\n    // const withDynamicInspectorControls = (settings, name) => {\n    //     console.log(\"Settings: \", settings);\n    //     if ( name === 'core/paragraph' ) {\n    //         return settings;\n    //     }\n    // }\n\n    // addFilter(\n    //     'blocks.registerBlockType',\n    //     'block-setting-restriction/with-dynamic-inspector-controls',\n    //     withDynamicInspectorControls\n    // )\n\n\n    // Function to disable specific supports based on conditions\n    const disableBlockSupports = (controls, block) => {\n        const bsrOptionsData = bsrConfig.bsrData;\n        const theCurrentUserId = bsrConfig.userId;\n\n        console.log(\"controls: \", controls);\n\n        const isUserInMatchingArray = ( blockName, currentUserId ) => {\n            if ( bsrOptionsData.hasOwnProperty( blockName ) ) {\n                const matchingArray = bsrOptionsData[ blockName ];\n\n                return matchingArray.includes( currentUserId );\n            }\n\n            return false;\n        };\n\n        const userHasAccess = isUserInMatchingArray( name, theCurrentUserId );\n\n        if ( ! userHasAccess ) {\n            if ( 'core/paragraph' === name ) {\n                settings.supports = {\n                    ...settings.supports,\n                    color: false,\n                    typography: false,\n                    __experimentalBorder: false,\n                    spacing: false,\n                };\n            }\n        }\n\n        return controls;\n    };\n\n    // Apply the filter to modify block supports\n    addFilter(\n        'blocks.inspectorControls',\n        'my-plugin/disable-block-supports',\n        disableBlockSupports\n    );\n\n\n    // const withDynamicInspectorControls = createHigherOrderComponent( ( OriginalComponent ) => {\n    //     return ( props ) => {\n    //         const { name: blockName, clientId } = props;\n    //         const currentUserId = bsrConfig.userId;\n\n    //         const isUserInMatchingArray = ( blockName, currentUserId ) => {\n    //             const bsrOptionsData = bsrConfig.bsrData;\n    \n    //             if ( bsrOptionsData.hasOwnProperty( blockName ) ) {\n    //                 const matchingArray = bsrOptionsData[ blockName ];\n    \n    //                 return matchingArray.includes( currentUserId );\n    //             }\n    \n    //             return false;\n    //         };\n    \n    //         // Check if the user should have access to block settings\n    //         const userHasAccess = isUserInMatchingArray( blockName, currentUserId );\n    \n    //         console.log( \"Has Access:\", userHasAccess );\n    //         console.log( \"Current User ID:\", currentUserId );\n    //         console.log( \"Block Name:\", blockName );\n    \n    //         if ( userHasAccess ) {\n    //             // Disable block settings for the user\n    //             console.log(props);\n    //             return (\n    //                 <Fragment>\n    //                     <Disabled>\n    //                         <div style={ { opacity: 0.6, backgroundColor: '#eee', border: '2px dashed #999' } }>\n    //                             <OriginalComponent {...props} />\n    //                         </div>\n    //                     </Disabled>\n    //                 </Fragment>\n    //             );\n    //         } else {\n    //             console.log(\"Here...\");\n    //         }\n    \n    //         return <OriginalComponent {...props} />;\n    //     };\n    // }, 'withDynamicInspectorControls');\n    \n    // addFilter(\n    //     'editor.InspectorControls',\n    //     // 'editor.BlockEdit',\n    //     'block-setting-restriction/with-dynamic-inspector-controls',\n    //     withDynamicInspectorControls\n    // );\n// });\n\n\njQuery(document).ready(function($) {\n    $(document).on(\"keyup\", \".bsr-form-group #searchBlockName\", function() {\n        var value = $(this).val().toLowerCase();\n        console.log(value);\n        $(\"#blockSettingRestrictionForm .bsr-form-group.has-filter\").filter(function() {\n            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)\n        });\n    });\n});"],"names":["domReady","addFilter","createHigherOrderComponent","Fragment","Disabled","store","blockEditorStore","InspectorControls","select","disableBlockSupports","controls","block","bsrOptionsData","bsrConfig","bsrData","theCurrentUserId","userId","console","log","isUserInMatchingArray","blockName","currentUserId","hasOwnProperty","matchingArray","includes","userHasAccess","name","settings","supports","color","typography","__experimentalBorder","spacing","jQuery","document","ready","$","on","value","val","toLowerCase","filter","toggle","text","indexOf"],"sourceRoot":""}